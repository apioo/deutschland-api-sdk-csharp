/**
 * AutobahnTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace DeutschlandAPI.SDK;

public class AutobahnTag : TagAbstract {
    public AutobahnTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }

    public AutobahnWarningTag Warning()
    {
        return new AutobahnWarningTag(
            this.HttpClient,
            this.Parser
        );
    }

    public AutobahnParkingLorryTag ParkingLorry()
    {
        return new AutobahnParkingLorryTag(
            this.HttpClient,
            this.Parser
        );
    }

    public AutobahnClosureTag Closure()
    {
        return new AutobahnClosureTag(
            this.HttpClient,
            this.Parser
        );
    }

    public AutobahnChargingStationTag ChargingStation()
    {
        return new AutobahnChargingStationTag(
            this.HttpClient,
            this.Parser
        );
    }


    /**
     * Returns all available autobahns
     */
    public async Task<AutobahnCollection> GetAll()
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/autobahn", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<AutobahnCollection>(response.Content);
        }

        throw (int) response.StatusCode switch
        {
            400 => new ResponseException(this.Parser.Parse<Response>(response.Content)),
            404 => new ResponseException(this.Parser.Parse<Response>(response.Content)),
            500 => new ResponseException(this.Parser.Parse<Response>(response.Content)),
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }


}
